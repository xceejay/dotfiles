         # print "$@" to stdin on receiving SIGWINCH
         # use exec as we will only kill direct childs on exiting,
         # also the additional bash process isn't needed
         </dev/tty \
             exec perl -e '
                 require "sys/ioctl.ph";
                 while (1) {
                     local $SIG{WINCH} = sub {
                         ioctl(STDIN, &TIOCSTI, $_) for split "", join " ", @ARGV;
                    };
                    sleep;
                }' \
                "${@}" &
    }
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        trap finalise EXIT
        parse_options "${@}"
        # print the redraw key twice as there's a run condition we can't circumvent
        # (we can't know the time fzf finished redrawing it's layout)
        print_on_winch "${REDRAW_KEY}${REDRAW_KEY}"
        start_ueberzug
        export -f draw_preview calculate_position
        SHELL="${BASH_BINARY}" \
            fzf --preview "draw_preview {}" \
                --preview-window "${DEFAULT_PREVIEW_POSITION}" \
                --bind "${REDRAW_KEY}:${REDRAW_COMMAND}" \
                "${@}"
    fi`
    `
    readonly BASH_BINARY="$(which bash)"
    readonly REDRAW_COMMAND="toggle-preview+toggle-preview"
    readonly REDRAW_KEY="Âµ"
    declare -r -x DEFAULT_PREVIEW_POSITION="right"
    declare -r -x UEBERZUG_FIFO="$(mktemp --dry-run --suffix "fzf-$$-ueberzug")"
    declare -r -x PREVIEW_ID="preview"
    function is_option_key [[ "${@}" =~ ^(\-.*|\+.*) ]]
    function is_key_value [[ "${@}" == *=* ]]
    function map_options {
        local -n options="${1}"
        local -n options_map="${2}"
        for ((i=0; i < ${#options[@]}; i++)); do
            local key="${options[$i]}" next_key="${options[$((i + 1))]:---}"
            local value=true
            is_option_key "${key}" || \
                continue
            if is_key_value "${key}"; then
                <<<"${key}" \
                    IFS='=' read key value
            elif ! is_option_key "${next_key}"; then
                value="${next_key}"
            fi
            options_map["${key}"]="${value}"
        done
    }
    function parse_options {
        declare -g -a script_options=("${@}")
        declare -g -A mapped_options
        map_options script_options mapped_options
        declare -g -r -x PREVIEW_POSITION="${mapped_options[--preview-window]%%:[^:]*}"
    }
    function start_ueberzug {
        mkfifo "${UEBERZUG_FIFO}"
        <"${UEBERZUG_FIFO}" \
            ueberzug layer --parser bash --silent &
        # prevent EOF
        3>"${UEBERZUG_FIFO}" \
            exec
    }
    function finalise {
        3>&- \
            exec
        &>/dev/null \
            rm "${UEBERZUG_FIFO}"
        &>/dev/null \
            kill $(jobs -p)
    }
    function calculate_position {
        # TODO costs: creating processes > reading files
        #      so.. maybe we should store the terminal size in a temporary file
        #      on receiving SIGWINCH
        #      (in this case we will also need to use perl or something else
        #      as bash won't execute traps if a command is running)
        < <(</dev/tty stty size) \
            read TERMINAL_LINES TERMINAL_COLUMNS
        case "${PREVIEW_POSITION:-${DEFAULT_PREVIEW_POSITION}}" in
            left|up|top)
                X=1
                Y=1
                ;;
            right)
                X=$((TERMINAL_COLUMNS - COLUMNS - 2))
                Y=1
                ;;
            down|bottom)
                X=1
                Y=$((TERMINAL_LINES - LINES - 1))
                ;;
        esac
    }
   function draw_preview {
       calculate_position
       >"${UEBERZUG_FIFO}" declare -A -p cmd=( \
           [action]=add [identifier]="${PREVIEW_ID}" \
           [x]="${X}" [y]="${Y}" \
           [width]="${COLUMNS}" [height]="${LINES}" \
           [scaler]=forced_cover [scaling_position_x]=0.[scaling_position_y]=0.\
           [path]="${@}")
           # add [synchronously_draw]=True if you want to see each change
   }
   function print_on_winch {
       # print "$@" to stdin on receiving SIGWINCH
       # use exec as we will only kill direct childs on exiting,
       # also the additional bash process isn't needed
       </dev/tty \
           exec perl -e '
               require "sys/ioctl.ph";
               while (1) {
                   local $SIG{WINCH} = sub {
                       ioctl(STDIN, &TIOCSTI, $_) for split "", join " ", @ARGV;
                   };
                   sleep;
               }' \
               "${@}" &
   }
   if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
       trap finalise EXIT
       parse_options "${@}"
       # print the redraw key twice as there's a run condition we can't circumvent
       # (we can't know the time fzf finished redrawing it's layout)
       print_on_winch "${REDRAW_KEY}${REDRAW_KEY}"
       start_ueberzug
       export -f draw_preview calculate_position
       SHELL="${BASH_BINARY}" \
           fzf --preview "draw_preview {}" \
               --preview-window "${DEFAULT_PREVIEW_POSITION}" \
               --bind "${REDRAW_KEY}:${REDRAW_COMMAND}" \
               "${@}"
   fi`
   touch nice 
   vim nice
   mx nice
   ./nice 
   vifm
   sudo apt install vifm 
   mv nice 
   mv nice ~/scripts/
   ls
   cd scripts/
   ls
   vim nice 
   mv nice img
   img
   vim test
   mx test 
   ./test 
   google.com
   ./test 
   rm test 
   imgs
   img
   vim
   vvy
   vvu
   vim
   sudo bas
   sudo bash
   rman
   vim
   curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
   vim
   cd .vim/autoload/
   ;s
   ls
   cat plug.vim 
   vim
   neovim
   sudo apt install neovim
   neovim
   vim
   rman 
   man neovim
   sudo apt install py4
   sudo apt install py3
   sudo apt search py3
   sudo apt install py3c-dev 
   vim
   pipinstall --user neovim
   sudo apt --purge neovim
   sudo apt remove--purge neovim
   sudo apt remove --purge neovim
   pipinstall --user neovim
   pyenv install 3.4.4
   sudo apt install pyenv
   vim
   sudo apt install neovim
   sudo apt install vim-gtk
   vim
   imgs
   img
   vim .vimrc 
   vim
   sudo apt install
   sudo apt install  vim-python-jedi
   vim
   vim nice.c
   vim
   vim
   vim .vimrc 
   vim .vimrc 
   cd .config/
   ls
   stow
   st
   sudo apt instal slow
   sudo apt instal; stow
   sudo apt install stow
   ..s
   ss
   ..
   t stow
   sudo pipinstall ueberzug
   ueberzug 
   man ueberzug
   t ueberzug
   ueberzug --help
   nnn
   sudo apt install ranger
   ranger
   ueberzug 
   img
   ueberzug --help
   cd Pictures/
   ls
   cd screenshots/
   ls
   ueberzug vis.png 
   ueberzug --help
   ueberzug layer vis.png 
   ueberzug layer  
   ueberzug layer  vis.png
   ueberzug --help
   ueberzug layer  --loader vis.png
   vim nice.c
   vim .vimrc 
   g++ nice -o nice.c 
   g++ nice  nice.c 
   g++ nice.c nice
   g++ -o nice nice.c 
   ./nice
   rm *nice
   rm nice*
   vim .vimrc 
   vim
   sudo apt install vim-jedi
   vim nice.c
   vim nice.cpp
   mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
   cd .vim/autoload/
   ls
   vim nice.cpp
   cd ~/.vim/bundle/ && git clone --recursive https://github.com/davidhalter/jedi-vim.git
   vim nice.cpp
   git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/bundle/jedi-vim
   cd .vim/bundle/
   ;s
   ls
   rm jedi-vim/
   rm -rf jedi-vim/
   vim nice.cpp
   git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/bundle/jedi-vim
   vim nice.cpp
   vim nice.java
   vim
   sudo bash
   sudo apt install vim-python-jedi 
   vim
   vim nice.java
   mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
   vim nice.java
   vim nice.jav
   vim nice.java
   sensors|grep temp
   git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/bundle/jedi-vim
   vim --version
   vim --version|grep +conceal
   sudo bash
   cd .vim
   ls
   cd bundle/
   l
   ss
   ls
   rm jedi-vim/
   rm -rf jedi-vim/
   ..
   ls
   cd autoload/
   ls
   ..
   cd plugged/
   ls
   rm -rf jedi-vim/
   sudo apt remove --purge vim-python-jedi 
   sudo apt install vim-python-jedi 
   dwn
   ..
   cd .vim/bundle/
   git clone https://github.com/ycm-core/YouCompleteMe
   cd YouCompleteMe/
   pythoninstall.py --clang-completer
   git submodule update --init --recursive
   ls
   ./install.py --java-completer
   ls
   vim
   vim --version|grep +conceal
   vim nice.java
   vim nice.cpp
   cd .vim/bundle/
   ls
   rm -rf YouCompleteMe/
   vim nice.cpp
   goto
   fzf .
   fzf -q .
   man fzf
   fzf --all
   fzf -a
   fzf 
   t fzf
   ps aux|fzf
   ps aux|fzf --reverse
   cd .vim
   ls
   cd bundle/
   ls
   ..
   cd plugged/
   ls
   cd jedi-vim/
   ls
   make
   sudo make
   sudo make install
   ebrc
   vim
   vim nice.cpp
   vim
   vim nice.cpp
   cd scripts/
   ls
   vim calc 
   ..
   vim nice.cpp
   vim-addons install python-jedi
   vim-addons status
   sudo apt-get install vim-python-jedi
   vim nice.cpp
   vifm
   nnn
   sudo apt install 
   sudo apt install "
       vim-nox
       vim-gtk
       vim-gnome
       vim-athena
   "
   sudo apt install vim-nox vim-gtk vim-gnome vim-athena"
   '
   "
   sudo apt install vim-nox vim-gtk vim-gnome vim-athena
   sudo apt install vim-nox vim-gtk  vim-athena
   vim nice.cpp
   cd .vim
   ls
   cd bundle/
   ls
   git clone 
   git clone https://github.com/Shougo/neocomplete.vim
   ls
   cd neocomplete.vim/
   ls
   cd plugin/
   ls
   cd neocomplete/
   ls
   ..
   l
   sls
   ls
   cd test/
   ls
   ..
   ls
   cd autoload/
   sl
   ls
   ..
   ls
   ..
   rm neocomplete.vim/
   mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
   cd ~/.vim/bundle && git clone --depth=https://github.com/vim-syntastic/syntastic.git
   ..
   vim .vimrc 
   imgs
   img
   type img
   cd scripts/
   vim img 
   fzf --preview
   fzf --preview nice
   cd Pictures/
   fzf --preview nice
   fzf --preview 
   fzf --preview .
   fzf --preview 
   man fzf|grep preview
   fzf --preview "ueberzug"
   fzf --preview "zathura"
   fzf --preview "sxiv"
   man vifm
   vifm
   img
   sxiv $(img)
   sxiv "$(img)"
   ..
   cd .vim
   ls
   cd plug
   cd plugged/
   ls
   cd space-vim-dark/
   ;s
   ls
   cat README.md 
   vim
   ls
   vim
   cd .vim
   ks
   ls
   cd plugged/
   ls
   cd space-vim-dark/
   ls
   cd colors/
   ls
   cat space-vim-dark.vim 
   ..
   ls
   cd space-vim-dark/
   ls
   pdf README.md 
   cat README.md 
   pandoc README.md -o README.pdf
   ls
   vim
   vim .vimrc 
   cd .vim
   ls
   cd plugged/
   ls
   cd space-vim-dark/
   ls
   cat README.md 
   vim .vimrc 
   vim
   logout
   loginctl terminate-user joel
   killall vim
   killall vim         
   htop
   killall calc
   htop
   ls
   cat dirsize
   sudo gparted
   ls
   htop
   vim
   g a list of windows with PID and geometry information.
   wmctrl -p -G -l
   wmctrl 
   wt mctrl 
   t wmctrl 
   rman
   sudo bash
   vim
   ls
   sxhkd 
   man sxhkd 
   ls
   ./forceeject 
   sudo ./forceeject 
   wmctrl | grep switch 
   wmctrl |grep .| grep switch 
   wmctrl | egrep switch 
   vim
   ls
   cd .foreui/
   ls
   ls color
   ls conf
   ls customize/
   ls
   g++ -o nice nice.cpp 
   ./nice 
   rm nice
   ./nice
   vim nice.cpp
   avwifi
   vvu
   lec21
   cd database/
   ls
   spdf
   ls
   lmvs
   ls
   lmvs
   lec12
   lec21
   ls
   pg
   cd java/
   ls
   cd books\ \&\ tutorials/
   ls
   cd Books/
   ls
   pdfs
   lec21
   pg
   cd java/
   ls
   cd books\ \&\ tutorials/
   ls
   cd Books/
   ls
   pdf 'java.pdf' 
   pdf 'java.pdf' &exit
   lec21
   pg
   cd java/
   l
   ls
   cd rawjava/
   ls
   javafx firstjavafx.
   javafx firstjavafx.java 
   javacfx firstjavafx.java 
   javacfx firstjavafx
   javafx firstjavafx
   lec21
   ls
   pg
   cd java/
   ls
   cd books\ \&\ tutorials/
   ls
   Books/
   ls
   ..
   ...
   cd java/
   ls
   cd rawjava/
   ls
   lt
   vim firstjavafx.java 
   ls
   lt
   javac firstjavafx.java
   javac firstjavafx.java 
   ls
   java tictactoe 
   ls
   java HangMan
   java TorF 
   java ATMsimulation 
   vim test.html
   ls
   ./nice
   lt
   ;s
   ls
   g++ -o nice nice.cpp 
   ./nice 
   g++ -o nice nice.cpp 
   ./nice 
   rhythmbox-client 
   rhythmbox-client --help
   rhythmbox-client -i
   ls
   lt
   ls
   chmods
   ls
   lt
   g++ -o nice nice.cpp 
   ./nice 
   vim nice.cpp 
   dwn
   cd Video/
   ls
   mpv 'G-Eazy_x_Bebe_Rexha_-_Me,_Myself_&_I_(Official_Music_Video)_-_YouTube.mkv' 
   mpv 'Xxxtentacion_&_Ski_Mask_The_Slump_God_Interview_-_YouTube.mkv' 
   mpv The_Xxxtentacion_Interview_-_YouTube.mkv 
   mpv XXXTentacion_Calls_Out_Drake_In_His_First_Interview_After_Jail\!_-_YouTube.mkv 
   cd .vim
   ls
   cd plug
   cd plugin/
   ls
   ..
   ls
   cd bundle/
   ls
   ...
   ls
   cd .vim
   ls
   cd plugin/
   ls
   ..
   cd ftplugin/
   ls
   ..
   cd bundle/
   ls
   ..
   ls
   cd autoload/
   ls
   ..
   l
   cd plugged/
   ls
   sl
   ls
   cd space-vim-dark/
   ls
   cd colors/
   ls
   cat space-vim-dark.vim 
   less space-vim-dark.vim 
   vvu
   hist
